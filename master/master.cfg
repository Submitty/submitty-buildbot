# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker("php-site-worker", 'pass'),
    worker.Worker("python-migrator-worker", 'pass'),
    worker.Worker("python-autograder-worker", 'pass'),
    worker.Worker("python-submitty-utils-worker", 'pass')
]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/Submitty/Submitty.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

# Schedulars

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["php-site-tests", "python-migrations-tests", "python-autograder-tests", "python-submitty-utils-tests"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["php-site-tests", "python-migrations-tests", "python-autograder-tests", "python-submitty-utils-tests"]))

# Global clone step, this is thesame for all build factories hence the need for this var
clone_step = steps.GitHub(repourl='git://github.com/Submitty/Submitty.git', mode='full', method='clobber')
# PHP Site Build Factory
php_factory = util.BuildFactory()
# Install composer dependencies
composerInstall = steps.ShellCommand(name="composer install",
                                  command=["composer", "install"],
                                  workdir="build/site",
                                  haltOnFailure=True,
                                  description="Install dependencies from composer")
# Run phpunit tests
phpunit = steps.ShellCommand(name="phpunit",
                                  command=["vendor/bin/phpunit", "-c", "tests/phpunit.xml"],
                                  workdir="build/site",
                                  haltOnFailure=True,
                                  description="Run php unit tests")  

php_factory.addStep(clone_step)                          
php_factory.addStep(composerInstall)
php_factory.addStep(phpunit)

# Python Migrator Build Factory
python_migrator_factory = util.BuildFactory()
# Install sqlalchemy dependency
sqlalchemy = steps.ShellCommand(name="pip3 install sqlalchemy",
                                  command=["pip3", "install", "sqlalchemy"],
                                  workdir="build/migration",
                                  haltOnFailure=True,
                                  description="Install sqlalchemy dependency")
# Run tests
testMigrations = steps.ShellCommand(name="python3 -m unittest",
                                  command=["python3", "-m", "unittest"],
                                  workdir="build/migration",
                                  haltOnFailure=True,
                                  description="Run tests for migrations")

python_migrator_factory.addStep(clone_step)
python_migrator_factory.addStep(sqlalchemy)
python_migrator_factory.addStep(testMigrations)

# Python Autograder Build Factory
python_autograder_factory = util.BuildFactory()
# Run tests
testAutograder = steps.ShellCommand(name="python3 autograder tests",
                                  command=["python3", "-m", "unittest", "discover"],  
                                  workdir="build/autograder",
                                  haltOnFailure=True,
                                  description="python3 autograder tests")

python_autograder_factory.addStep(clone_step)
python_autograder_factory.addStep(testAutograder)

# Python Submitty Utils Build Factory
python_submitty_utils_factory = util.BuildFactory()
# Run tests
testSubmittyUtils = steps.ShellCommand(name="python3 submitty utils tests",
                                  command=["python3", "setup.py", "test"],
                                  workdir="build/python_submitty_utils",
                                  haltOnFailure=True,
                                  description="python3 submitty utils tests")

python_submitty_utils_factory.addStep(clone_step)
python_submitty_utils_factory.addStep(testSubmittyUtils)


# Builders
c['builders'] = []
c['builders'].append(util.BuilderConfig(name="php-site-tests", 
                            workernames=["php-site-worker"],
                            factory=php_factory))
c['builders'].append(util.BuilderConfig(name="python-migrations-tests", 
                            workernames=["python-migrator-worker"],
                            factory=python_migrator_factory))
c['builders'].append(util.BuilderConfig(name="python-submitty-utils-tests", 
                            workernames=["python-submitty-utils-worker"],
                            factory=python_submitty_utils_factory))
c['builders'].append(util.BuilderConfig(name="python-autograder-tests", 
                            workernames=["python-autograder-worker"],
                            factory=python_autograder_factory))
####### REPORTERS
context = util.Interpolate("buildbot/%(prop:buildername)s")
githubStatusPush = reporters.GitHubStatusPush(token='0acb5664e97bbebfb45243612cceb79a034da7df',
                                context=context,
                                startDescription='Build started.',
                                endDescription='Build done.')

###### SERVICES

# 'services' simply refers to the list of available services. The results of each build will be
# pushed to all reporters appended to the list of services. Buildbot has a variety to choose from,
# like the GithubStatusPush and  IRC bots.

c['services'] = []
c['services'].append(githubStatusPush)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Submitty"
c['titleURL'] = "www.submitty.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}

